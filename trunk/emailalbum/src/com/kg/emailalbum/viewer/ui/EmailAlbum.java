/*
 * EmailAlbum.java
 *
 * Created on 4 ao√ªt 2008, 15:45
 */
package com.kg.emailalbum.viewer.ui;

import com.kg.util.ImageUtil;
import java.awt.Graphics;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.Iterator;
import java.util.Properties;
import java.util.SortedSet;
import java.util.TreeSet;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.event.PopupMenuEvent;
import javax.swing.event.PopupMenuListener;
import javax.swing.filechooser.FileFilter;

/**
 *
 * @author  gaudin
 */
public class EmailAlbum extends javax.swing.JFrame {

    SortedSet pictures = new TreeSet();
    Iterator iPics = null;
    BufferedImage currentImage = null;
    boolean popupJustHidden = false;

    /** Creates new form EmailAlbum */
    public EmailAlbum() {
        try {
            getRootPane().setPreferredSize(Toolkit.getDefaultToolkit().getScreenSize());
            setVisible(true);
            setExtendedState(MAXIMIZED_BOTH);
            addKeyListener(new KeyListener() {

                public void keyTyped(KeyEvent e) {
                    next();
                }

                public void keyPressed(KeyEvent e) {
                }

                public void keyReleased(KeyEvent e) {
                }
            });
            addMouseListener(new MouseListener() {

                public void mouseClicked(MouseEvent e) {
                }

                public void mousePressed(MouseEvent e) {
                    repaint();
                    maybeShowPopup(e);
                }

                public void mouseReleased(MouseEvent e) {
                    repaint();
                    maybeShowPopup(e);
                    if(!e.isPopupTrigger() && !popupJustHidden) {
                        next();
                    } else {
                        popupJustHidden = false;
                    }
                }

                public void mouseEntered(MouseEvent e) {
                }

                public void mouseExited(MouseEvent e) {
                }

                private void maybeShowPopup(MouseEvent e) {
                    if (e.isPopupTrigger()) {
                        rightBtnMenu.show(e.getComponent(), e.getX(), e.getY());
                    }
                }
            });
            
            initComponents();

            Properties pics = new Properties();

            pics.load(getClass().getResourceAsStream("/com/kg/emailalbum/viewer/pictures/content"));
            pictures.addAll(pics.keySet());
            start();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }

    public void start() {
        iPics = pictures.iterator();
        display((String) iPics.next());
    }

    private void next() {
        if (iPics.hasNext()) {
            display((String) iPics.next());
        } else {
            System.exit(0);
        }
    }

    private void display(String imageName) {
        try {
            System.out.println("/com/kg/emailalbum/viewer/pictures/" + imageName);
            currentImage = ImageIO.read(getClass().getResourceAsStream("/com/kg/emailalbum/viewer/pictures/" + imageName));
            repaint();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }

    public void paint(Graphics g) {
        if (currentImage != null) {
            BufferedImage resizedImage = ImageUtil.resize(currentImage, getSize());
            g.clearRect(0, 0, getWidth(), getHeight());
            int offsetX = (getWidth() - resizedImage.getWidth()) / 2;
            int offsetY = (getHeight() - resizedImage.getHeight()) / 2;
            g.drawImage(resizedImage, offsetX, offsetY, null);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        rightBtnMenu = new javax.swing.JPopupMenu();
        menuSavePicture = new javax.swing.JMenuItem();

        rightBtnMenu.setBackground(java.awt.SystemColor.control);
        rightBtnMenu.setLightWeightPopupEnabled(false);
        rightBtnMenu.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                rightBtnMenuPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });

        menuSavePicture.setBackground(java.awt.SystemColor.control);
        menuSavePicture.setText("Enregistrer");
        menuSavePicture.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuSavePictureActionPerformed(evt);
            }
        });
        rightBtnMenu.add(menuSavePicture);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void rightBtnMenuPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_rightBtnMenuPopupMenuWillBecomeInvisible
popupJustHidden = true;
}//GEN-LAST:event_rightBtnMenuPopupMenuWillBecomeInvisible

private void menuSavePictureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuSavePictureActionPerformed
saveCurrentImage();
}//GEN-LAST:event_menuSavePictureActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EmailAlbum().setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem menuSavePicture;
    private javax.swing.JPopupMenu rightBtnMenu;
    // End of variables declaration//GEN-END:variables

    private void saveCurrentImage() {
        JFileChooser fileSelector = new JFileChooser();
        fileSelector.setMultiSelectionEnabled(false);
        fileSelector.setDialogType(JFileChooser.SAVE_DIALOG);
        fileSelector.addChoosableFileFilter(new FileFilter() {

            public boolean accept(File f) {
                if (f.isDirectory()) {
                    return true;
                }

                String extension = ImageUtil.getExtension(f);
                if (extension != null) {
                    if (extension.equalsIgnoreCase(ImageUtil.jpeg) ||
                            extension.equalsIgnoreCase(ImageUtil.jpg)) {
                        return true;
                    } else {
                        return false;
                    }
                }

                return false;
            }

            public String getDescription() {
                return "Pictures";
            }
        });
        
        int returnVal = fileSelector.showOpenDialog(null);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File saveFile = fileSelector.getSelectedFile();
            try {
                ImageIO.write(currentImage, "jpeg", saveFile);
            } catch (IOException ex) {
                ex.printStackTrace();
            }

        }
    }

}
